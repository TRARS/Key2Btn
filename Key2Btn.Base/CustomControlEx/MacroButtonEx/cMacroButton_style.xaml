<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:sys="clr-namespace:System;assembly=mscorlib"
                    xmlns:local="clr-namespace:Key2Btn.Base.CustomControlEx.MacroButtonEx"
                    xmlns:container="clr-namespace:Key2Btn.Base.CustomControlEx.MacroButtonGroupEx"
                    xmlns:effect="clr-namespace:Key2Btn.Base.CustomEffect"
                    xmlns:attached="clr-namespace:Key2Btn.Base.Helper.AttachedProperty" 
                    xmlns:contextmenuex="clr-namespace:Key2Btn.Base.CustomControlExBase.ContextMenuEx"
                    xmlns:macrobuttoneditorex="clr-namespace:Key2Btn.Base.CustomControlEx.MacroButtonEditorEx"
                    xmlns:proxy="clr-namespace:Key2Btn.Base.Helper.ExClass">

    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter"/>
    <local:cMacroButton_converter_keycodetype2brushcolor x:Key="cMacroButton_converter_keycodetype2brushcolor"/>
    <local:cMacroButton_converter_keycode2textdecorations x:Key="cMacroButton_converter_keycode2textdecorations"/>
    <local:cMacroButton_converter_state2opacity x:Key="cMacroButton_converter_state2opacity"/>
    <local:cMacroButton_converter_modifykey2color x:Key="cMacroButton_converter_modifykey2color"/>
    <local:cMacroButton_converter_containertype2minwidth x:Key="cMacroButton_converter_containertype2minwidth"/>
    <local:cMacroButton_converter_width2multiplesofunitwidth x:Key="cMacroButton_converter_width2multiplesofunitwidth"/>
    <local:cMacroButton_converter_bool2visibility x:Key="cMacroButton_converter_bool2visibility"/>
    <local:cMacroButton_converter_colornullcheck x:Key="cMacroButton_converter_colornullcheck"/>
    <local:cMacroButton_converter_backgroundullcheck x:Key="cMacroButton_converter_backgroundullcheck"/>
    <local:cMacroButton_converter_pos2margin x:Key="cMacroButton_converter_pos2margin"/>
    <local:cMacroButton_converter_wh2ripplesize x:Key="cMacroButton_converter_wh2ripplesize"/>
    <local:cMacroButton_converter_ripplecenter2canvasleft x:Key="cMacroButton_converter_ripplecenter2canvasleft"/>
    <local:cMacroButton_converter_ripplecenter2canvastop x:Key="cMacroButton_converter_ripplecenter2canvastop"/>
    <local:cMacroButton_converter_cornerradius2double x:Key="cMacroButton_converter_cornerradius2double"/>
    <local:cMacroButton_converter_size2rect x:Key="cMacroButton_converter_size2rect"/>
    <local:cMacroButton_converter_rippleprogress2opacity x:Key="cMacroButton_converter_rippleprogress2opacity"/>
    <local:cMacroButton_converter_width2stretch x:Key="cMacroButton_converter_width2stretch"/>
    <local:cMacroButton_converter_namekeycode2visibility x:Key="cMacroButton_converter_namekeycode2visibility"/>
    <local:cMacroButton_converter_pathdata2visibility x:Key="cMacroButton_converter_pathdata2visibility"/>
    <local:cMacroButton_converter_shiftkeynullcheck x:Key="cMacroButton_converter_shiftkeynullcheck"/>
    <local:cMacroButton_converter_leftright2visibility x:Key="cMacroButton_converter_leftright2visibility"/>
    <local:cMacroButton_converter_leftright2horizontalalignment x:Key="cMacroButton_converter_leftright2horizontalalignment"/>
    <local:cMacroButton_converter_insertmarkerheightlimit x:Key="cMacroButton_converter_insertmarkerheightlimit"/>
    <local:cMacroButton_converter_editor4macrobutton x:Key="cMacroButton_converter_editor4macrobutton"/>
    
    <Style TargetType="{x:Type local:cMacroButton}">
        <Style.Resources>
            <!--Debug用-->
            <DataTemplate x:Key="DebugTemplate" DataType="{x:Type ContentPresenter}">
                <Grid>
                    <!--内容-->
                    <Border Opacity="{Binding BackgroundOpacity, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"
                            Background="{Binding IsModifyKeyDown, Converter={StaticResource cMacroButton_converter_modifykey2color}}">
                        <Border.Width>
                            <MultiBinding Converter="{StaticResource cMacroButton_converter_width2multiplesofunitwidth}">
                                <Binding Path="ActualWidth" ElementName="helper"/>
                                <Binding Path="UnitWidth" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="Spacing" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="IsDebugMode" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="MaxWidthScale"/>
                                <Binding Path="DataContext.Type" RelativeSource="{RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}"/>
                                <Binding Path="AbsWidth"/>
                            </MultiBinding>
                        </Border.Width>

                        <Grid Margin="3,2,3,2">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="auto" SharedSizeGroup="Prefix"/>
                                <ColumnDefinition Width="3"/>
                                <ColumnDefinition Width="auto" SharedSizeGroup="Suffix"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/>
                                <RowDefinition/> <!--附加-->
                                <RowDefinition/>
                            </Grid.RowDefinitions>

                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Key" Visibility="{Binding Visibility, ElementName=normalkey}"
                                       Opacity="0.35" 
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="0" x:Name="normalkey" Text="{Binding Key}" Visibility="Collapsed"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="0" Grid.Row="1" Text="ShiftKey" Visibility="{Binding Visibility, ElementName=shiftkey}"
                                       Opacity="0.35" 
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="1" x:Name="shiftkey" Text="{Binding ShiftKey}" Visibility="Collapsed"
                                       Foreground="White"/>

                            <TextBlock Grid.Column="0" Grid.Row="0" Text="Name:" Visibility="{Binding Visibility, ElementName=name}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="0" x:Name="name"
                                       Text="{Binding Name}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="White"/>

                            <TextBlock Grid.Column="0" Grid.Row="1" Text="KeyCode:" Visibility="{Binding Visibility, ElementName=keycode}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="1" x:Name="keycode"
                                       Text="{Binding KeyCode}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="White"/>

                            <TextBlock Grid.Column="0" Grid.Row="2" Text="Color:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="2" 
                                       Text="{Binding Color}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="{Binding Color, Converter={StaticResource cMacroButton_converter_colornullcheck}}"/>

                            <TextBlock Grid.Column="0" Grid.Row="3" Text="MWScale:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="3" 
                                       Text="{Binding MaxWidthScale, StringFormat={}{0:0.0x}}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="White"/>

                            <TextBlock Grid.Column="0" Grid.Row="4" Text="Type:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="4" 
                                       Text="{Binding Type}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="{Binding Type, Converter={StaticResource cMacroButton_converter_keycodetype2brushcolor}}"/>

                            <TextBlock Grid.Column="0" Grid.Row="5" Text="ActionKey:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="5" 
                                       Text="{Binding ActionKey}"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="White"/>

                            <TextBlock Grid.Column="0" Grid.Row="6" Text="Pos:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="6"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Foreground="LightGray">     
                                (<Run Text="{Binding PosX, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}" Foreground="Yellow"/>,<!--
                              --><Run Text="{Binding PosY, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}" Foreground="Yellow"/>)
                            </TextBlock>

                            <TextBlock Grid.Column="0" Grid.Row="7" Text="FirstInLine:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="7"
                                       Text="{Binding Path=(attached:WrapPanelHelper.IsFirstInLine), RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"
                                       Foreground="LightGray"/>

                            <TextBlock Grid.Column="0" Grid.Row="8" Text="LineIndex:"
                                       HorizontalAlignment="Left" VerticalAlignment="Center" 
                                       Opacity="0.35"
                                       Foreground="White"/>
                            <TextBlock Grid.Column="2" Grid.Row="8" 
                                       Text="{Binding Path=(attached:WrapPanelHelper.LineIndex), RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"
                                       Foreground="LightGray"/>
                        </Grid>
                    </Border>

                    <!--自然尺寸-->
                    <Canvas Visibility="Hidden">
                        <Border x:Name="helper">
                            <Grid Margin="3,2,3,2">
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="auto" SharedSizeGroup="Prefix"/>
                                    <ColumnDefinition Width="3"/>
                                    <ColumnDefinition Width="auto" SharedSizeGroup="Suffix"/>
                                </Grid.ColumnDefinitions>
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>

                                <TextBlock Grid.Column="0" Grid.Row="0" Text="Name:"/>
                                <TextBlock Grid.Column="2" Grid.Row="0" Text="{Binding Name}" />
                                <TextBlock Grid.Column="0" Grid.Row="1" Text="KeyCode:"/>
                                <TextBlock Grid.Column="2" Grid.Row="1" Text="{Binding KeyCode}"/>
                                <TextBlock Grid.Column="0" Grid.Row="2" Text="Color:"/>
                                <TextBlock Grid.Column="2" Grid.Row="2" Text="{Binding Color}"/>
                                <TextBlock Grid.Column="0" Grid.Row="3" Text="MWScale:"/>
                                <TextBlock Grid.Column="2" Grid.Row="3" Text="{Binding MaxWidthScale}"/>
                                <TextBlock Grid.Column="0" Grid.Row="4" Text="PosXY:"/>
                                <TextBlock Grid.Column="2" Grid.Row="4">
                                    (<Run Text="{Binding PosX, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"/>,<Run Text="{Binding PosY, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"/>)
                                </TextBlock>
                                
                                <TextBlock Grid.Column="0" Grid.Row="5" Text="FirstInLine:"/>
                                <TextBlock Grid.Column="2" Grid.Row="5" Text="{Binding Path=(attached:WrapPanelHelper.IsFirstInLine), RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"/>
                                <TextBlock Grid.Column="0" Grid.Row="6" Text="LineIndex:"/>
                                <TextBlock Grid.Column="2" Grid.Row="6" Text="{Binding Path=(attached:WrapPanelHelper.LineIndex), RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"/>
                            </Grid>
                        </Border>
                    </Canvas>
                </Grid>

                <DataTemplate.Triggers>
                    <!--如果是键盘-->
                    <DataTrigger Binding="{Binding DataContext.Type, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}}" Value="SimpleKeyboardContainer">
                        <Setter Property="Visibility" Value="Collapsed" TargetName="name"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="keycode"/>
                        <Setter Property="Visibility" Value="Visible" TargetName="normalkey"/>
                        <Setter Property="Visibility" Value="Visible" TargetName="shiftkey"/>
                    </DataTrigger>
                </DataTemplate.Triggers>
            </DataTemplate>

            <!--Release用-->
            <DataTemplate x:Key="ReleaseTemplate" DataType="{x:Type ContentPresenter}">
                <Grid>
                    <!--内容-->
                    <Border Height="36"
                            Opacity="{Binding BackgroundOpacity, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}"
                            Background="{Binding IsModifyKeyDown, Converter={StaticResource cMacroButton_converter_modifykey2color}}"
                            CornerRadius="{Binding CornerRadius, ElementName=btnOverlay}"
                            Visibility="Visible">
                        <Border.MinWidth>
                            <MultiBinding Converter="{StaticResource cMacroButton_converter_containertype2minwidth}">
                                <Binding Path="UnitWidth" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="DataContext.Type" RelativeSource="{RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}"/>
                            </MultiBinding>
                        </Border.MinWidth>
                        <Border.Width>
                            <MultiBinding Converter="{StaticResource cMacroButton_converter_width2multiplesofunitwidth}">
                                <Binding Path="ActualWidth" ElementName="helper"/>
                                <Binding Path="UnitWidth" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="Spacing" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="IsDebugMode" RelativeSource="{RelativeSource AncestorType={x:Type local:cMacroButton}}"/>
                                <Binding Path="MaxWidthScale"/>
                                <Binding Path="DataContext.Type" RelativeSource="{RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}"/>
                                <Binding Path="AbsWidth"/>
                            </MultiBinding>
                        </Border.Width>

                        <Grid x:Name="body" Margin="2,1,2,2">
                            <Grid.RowDefinitions>
                                <RowDefinition Height="*" x:Name="mainrow"/>
                                <RowDefinition Height="*"/>
                            </Grid.RowDefinitions>

                            <!--底色-->
                            <Border Grid.Row="0" x:Name="backgroundbox"
                                    Background="{Binding Color, Converter={StaticResource cMacroButton_converter_colornullcheck}}" 
                                    Opacity="{Binding DataContext.MacroButtonBackgroundOpacity, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}}"
                                    CornerRadius="2"
                                    Margin="0,1,0,-1"/>

                            <!--亮线-->
                            <Border Grid.Row="0" x:Name="backgroundboxunderline" Opacity="0"
                                    Height="1"
                                    VerticalAlignment="Bottom"
                                    Background="{Binding Color, Converter={StaticResource cMacroButton_converter_colornullcheck}}"
                                    Margin="{Binding Margin, ElementName=backgroundbox}">
                                <Border.OpacityMask>
                                    <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                        <GradientStop Color="Transparent" Offset="0.1"/>
                                        <GradientStop Color="Black" Offset="0.5"/>
                                        <GradientStop Color="Transparent" Offset="0.9"/>
                                    </LinearGradientBrush>
                                </Border.OpacityMask>
                                <Border.Effect>
                                    <effect:TranslationalEffect Threshold="0"/>
                                </Border.Effect>
                            </Border>

                            <!--按键名or普通字符-->
                            <Viewbox Grid.Row="0" x:Name="namebox"
                                     Visibility="{Binding Data, ElementName=iconpath, Converter={StaticResource cMacroButton_converter_pathdata2visibility}}">
                                <Viewbox.Stretch>
                                    <MultiBinding Converter="{StaticResource cMacroButton_converter_width2stretch}">
                                        <Binding Path="ActualWidth" ElementName="name" Mode="OneWay"/>
                                        <Binding Path="ActualWidth" ElementName="body" Mode="OneWay"/>
                                    </MultiBinding>
                                </Viewbox.Stretch>
                                <Grid>
                                    <TextBlock x:Name="name"
                                               Text="{Binding Name}"
                                               TextDecorations ="{Binding KeyCode, Converter={StaticResource cMacroButton_converter_keycode2textdecorations}}"
                                               TextTrimming="WordEllipsis"
                                               Foreground="White">
                                    </TextBlock>
                                    <TextBlock x:Name="normalkey"
                                               Text="{Binding Key}" 
                                               Foreground="White"
                                               Visibility="Collapsed"/>
                                </Grid>
                            </Viewbox>

                            <!--按键码or上档字符-->
                            <Viewbox Grid.Row="1" x:Name="keycodebox">
                                <Viewbox.Visibility>
                                    <MultiBinding Converter="{StaticResource cMacroButton_converter_namekeycode2visibility}">
                                        <Binding Path="Text" ElementName="name" Mode="OneWay"/>
                                        <Binding Path="Text" ElementName="keycode" Mode="OneWay"/>
                                        <Binding Path="DataContext.Type" RelativeSource="{RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}"/>
                                    </MultiBinding>
                                </Viewbox.Visibility>
                                <Viewbox.Stretch>
                                    <MultiBinding Converter="{StaticResource cMacroButton_converter_width2stretch}">
                                        <Binding Path="ActualWidth" ElementName="keycode" Mode="OneWay"/>
                                        <Binding Path="ActualWidth" ElementName="body" Mode="OneWay"/>
                                    </MultiBinding>
                                </Viewbox.Stretch>
                                <Grid>
                                    <TextBlock x:Name="keycode"
                                               Text="{Binding KeyCode}" 
                                               Foreground="White"
                                               FontSize="11.5"
                                               Opacity="{Binding MachineState,
                                                                 RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}},
                                                                 Converter={StaticResource cMacroButton_converter_state2opacity}}"/>
                                    <TextBlock x:Name="shiftkey" 
                                               Text="{Binding ShiftKey}"
                                               Foreground="White"
                                               Opacity="0.15"
                                               Visibility="Collapsed"/>
                                </Grid>
                            </Viewbox>

                            <!--图形-->
                            <Border Grid.RowSpan="2"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Top"
                                    Background="Transparent" 
                                    Width="20" 
                                    Height="{Binding Width, RelativeSource={RelativeSource Self}}"
                                    Margin="{Binding PathMargin}">
                                <Path x:Name="iconpath" Data="{Binding PathData}" Fill="White" Stretch="Uniform"/>
                            </Border>
                            
                        </Grid>
                    </Border>

                    <!--自然尺寸-->
                    <Canvas Visibility="Hidden">
                        <Border x:Name="helper">
                            <Grid Margin="3,3,3,0">
                                <Grid.RowDefinitions>
                                    <RowDefinition/>
                                    <RowDefinition/>
                                </Grid.RowDefinitions>
                                <Border Grid.Row="0" Margin="0,1,0,-1"/>
                                <TextBlock Grid.Row="0" Text="{Binding Name}"/>
                                <!--<TextBlock Grid.Row="1" Text="{Binding KeyCode}" FontSize="11.5"/>-->
                            </Grid>
                        </Border>
                    </Canvas>
                </Grid>

                <DataTemplate.Triggers>
                    <!--如果禁用-->
                    <DataTrigger Binding="{Binding IsEnable}" Value="False">
                        <Setter Property="Opacity" Value="0.2" TargetName="namebox"/>
                        <Setter Property="Opacity" Value="0.2" TargetName="keycodebox"/>
                    </DataTrigger>
                    
                    <!--如果是快捷键，且鼠标进入-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding DataContext.Type, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}}" Value="MacroButtonContainer"/>
                            <Condition Binding="{Binding MachineState, RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}}" Value="MouseEnterEx"/>
                        </MultiDataTrigger.Conditions>

                        <!--<Setter Property="Visibility" Value="Visible" TargetName="backgroundboxunderline"/>-->
                        <MultiDataTrigger.EnterActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundboxunderline"
                                                                   Storyboard.TargetProperty="Opacity"
                                                                   FillBehavior="HoldEnd">
                                        <LinearDoubleKeyFrame KeyTime="0:0:0" Value="1"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </MultiDataTrigger.EnterActions>
                        <MultiDataTrigger.ExitActions>
                            <BeginStoryboard>
                                <Storyboard>
                                    <DoubleAnimationUsingKeyFrames Storyboard.TargetName="backgroundboxunderline"
                                                                   Storyboard.TargetProperty="Opacity"
                                                                   FillBehavior="HoldEnd">
                                        <LinearDoubleKeyFrame KeyTime="0:0:0.2" Value="0"/>
                                    </DoubleAnimationUsingKeyFrames>
                                </Storyboard>
                            </BeginStoryboard>
                        </MultiDataTrigger.ExitActions>
                    </MultiDataTrigger>
                    
                    <!--如果是键盘-->
                    <DataTrigger Binding="{Binding DataContext.Type, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}}" Value="SimpleKeyboardContainer">
                        <Setter Property="HorizontalAlignment" Value="Left" TargetName="namebox"/>
                        <Setter Property="VerticalAlignment" Value="Top" TargetName="namebox"/>
                        <Setter Property="Margin" Value="2,1,0,0" TargetName="namebox"/>

                        <Setter Property="Visibility" Value="Collapsed" TargetName="name"/>
                        <Setter Property="Visibility" Value="Collapsed" TargetName="keycode"/>
                        <Setter Property="Visibility" Value="Visible" TargetName="normalkey"/>
                        <Setter Property="Visibility" Value="Visible" TargetName="shiftkey"/>
                    </DataTrigger>

                    <!--如果是字母，且ShiftKey非空-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAlphabet}" Value="True"/>
                            <Condition Binding="{Binding ShiftKey, Converter={StaticResource cMacroButton_converter_shiftkeynullcheck}}" Value="False"/>
                        </MultiDataTrigger.Conditions>

                        <Setter Property="SharedSizeGroup" Value="alphabetbox" TargetName="mainrow"/>

                        <Setter Property="FontSize" Value="14" TargetName="normalkey"/>
                        <Setter Property="FontSize" Value="14" TargetName="shiftkey"/>

                        <Setter Property="HorizontalAlignment" Value="Left" TargetName="keycodebox"/>
                        <Setter Property="VerticalAlignment" Value="Top" TargetName="keycodebox"/>
                        <Setter Property="Margin" Value="2,1,0,0" TargetName="keycodebox"/>
                        <Setter Property="Grid.Row" Value="0" TargetName="keycodebox"/>
                        <Setter Property="Opacity" Value="0" TargetName="shiftkey"/>
                    </MultiDataTrigger>
                    
                    <!--如果非字母，且ShiftKey非空-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAlphabet}" Value="False"/>
                            <Condition Binding="{Binding ShiftKey, Converter={StaticResource cMacroButton_converter_shiftkeynullcheck}}" Value="False"/>
                        </MultiDataTrigger.Conditions>

                        <Setter Property="HorizontalAlignment" Value="Center" TargetName="namebox"/>
                        <Setter Property="VerticalAlignment" Value="Center" TargetName="namebox"/>
                        <Setter Property="Margin" Value="0,0,0,0" TargetName="namebox"/>
                        <Setter Property="Grid.Row" Value="1" TargetName="namebox"/>

                        <Setter Property="HorizontalAlignment" Value="Left" TargetName="keycodebox"/>
                        <Setter Property="VerticalAlignment" Value="Top" TargetName="keycodebox"/>
                        <Setter Property="Margin" Value="2,1,0,0" TargetName="keycodebox"/>
                        <Setter Property="Grid.Row" Value="0" TargetName="keycodebox"/>
                    </MultiDataTrigger>
                    
                    <!--如果是字母，且激活大小写锁定或按下修饰键，且ShiftKey非空-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAlphabet}" Value="True"/>
                            <Condition Binding="{Binding IsCapsOrShiftActive}" Value="True"/>
                            <Condition Binding="{Binding ShiftKey, Converter={StaticResource cMacroButton_converter_shiftkeynullcheck}}" Value="False"/>
                        </MultiDataTrigger.Conditions>

                        <Setter Property="Opacity" Value="0" TargetName="normalkey"/>
                        <Setter Property="Opacity" Value="1" TargetName="shiftkey"/>
                    </MultiDataTrigger>

                    <!--如果非字母，且激按下修饰键，且ShiftKey非空-->
                    <MultiDataTrigger>
                        <MultiDataTrigger.Conditions>
                            <Condition Binding="{Binding IsAlphabet}" Value="False"/>
                            <Condition Binding="{Binding IsShiftActive}" Value="True"/>
                            <Condition Binding="{Binding ShiftKey, Converter={StaticResource cMacroButton_converter_shiftkeynullcheck}}" Value="False"/>
                        </MultiDataTrigger.Conditions>

                        <Setter Property="Opacity" Value="0.15" TargetName="normalkey"/>
                        <Setter Property="Opacity" Value="1" TargetName="shiftkey"/>
                    </MultiDataTrigger>

                </DataTemplate.Triggers>
            </DataTemplate>
        </Style.Resources>

        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="ContainerType" Value="{Binding DataContext.Type, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}, Mode=OneWay}"/>
        <Setter Property="IsDebugMode" Value="{Binding IsDebugMode, RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroupContainer}}, Mode=OneWay}"/>
        <Setter Property="ClickCommand" Value="{Binding ClickMacro}"/>
        <Setter Property="LongPressDownCommand" Value="{Binding LongPressDownMacro}"/>
        <Setter Property="LongPressUpCommand" Value="{Binding LongPressUpMacro}"/>
        <Setter Property="IsEnabled" Value="{Binding IsEnable}"/>
        <Setter Property="IsHitTestVisible" Value="{Binding IsEnable}"/>
        <Setter Property="MarqueeRunning" Value="{Binding IsMarqueeActive}"/>
        <Setter Property="Reflash" Value="{Binding IsReflash}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="0"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:cMacroButton}">
                    <Border x:Name="border" 
                            Background="{TemplateBinding Background}" 
                            BorderBrush="{TemplateBinding BorderBrush}" 
                            BorderThickness="{TemplateBinding BorderThickness}" 
                            Padding="{TemplateBinding Padding}">
                       
                        <Grid x:Name="contentGrid">
                            <Grid HorizontalAlignment="Right" 
                                  Background="Transparent">
                                <Grid.Margin>
                                    <MultiBinding Converter="{StaticResource cMacroButton_converter_pos2margin}" Mode="OneWay">
                                        <Binding Path="PosX" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="PosY" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="Spacing" RelativeSource="{RelativeSource TemplatedParent}"/>
                                        <Binding Path="(attached:WrapPanelHelper.IsFirstInLine)" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                        <Binding Path="(attached:WrapPanelHelper.LineIndex)" RelativeSource="{RelativeSource TemplatedParent}" Mode="OneWay"/>
                                        <Binding Path="DataContext.Type" RelativeSource="{RelativeSource AncestorType={x:Type container:cMacroButtonGroup}}"/>
                                        <Binding Path="DataContext.KeySpacing" RelativeSource="{RelativeSource TemplatedParent}"/>
                                    </MultiBinding>
                                </Grid.Margin>

                                <!--分层-->
                                <Grid HorizontalAlignment="Left" VerticalAlignment="Center">
                                    <Border x:Name="btnBackground" 
                                            Height="{Binding ActualHeight, ElementName=btnContainer, Mode=OneWay}"
                                            Background="{TemplateBinding BackgroundColor}" 
                                            Opacity="{TemplateBinding BackgroundOpacity}"
                                            CornerRadius="{TemplateBinding BackgroundCornerRadius}"/>

                                    <Border HorizontalAlignment="Left" 
                                            VerticalAlignment="Top">
                                        <ContentControl x:Name="btnContainer" Content="{Binding}"/>
                                    </Border>

                                    <Border x:Name="btnOverlay"
                                            Height="{Binding ActualHeight, ElementName=btnContainer, Mode=OneWay}"
                                            BorderBrush="{TemplateBinding OverlayBorderColor}"
                                            CornerRadius="2"
                                            BorderThickness="1"/>

                                    <Rectangle x:Name="insertMarker" 
                                               Width="3" 
                                               Height="{Binding ActualHeight, ElementName=btnOverlay, Converter={StaticResource cMacroButton_converter_insertmarkerheightlimit}, ConverterParameter=24}" 
                                               RadiusX="2" RadiusY="{Binding RadiusX, RelativeSource={RelativeSource Self}}"
                                               HorizontalAlignment="{Binding LeftRightFlag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource cMacroButton_converter_leftright2horizontalalignment}}"
                                               VerticalAlignment="Center"
                                               Visibility="{Binding LeftRightFlag, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource cMacroButton_converter_leftright2visibility}}"
                                               Fill="Red"/>
                                </Grid>

                                <!--波纹-->
                                <Canvas ClipToBounds="True" IsHitTestVisible="False"
                                        Width="{Binding ActualWidth, ElementName=btnOverlay, Mode=OneWay}"
                                        Height="{Binding ActualHeight, ElementName=btnOverlay, Mode=OneWay}">
                                    <Canvas.Clip>
                                        <RectangleGeometry RadiusX="{Binding CornerRadius, 
                                                                             Source={x:Reference btnOverlay},
                                                                             Converter={StaticResource cMacroButton_converter_cornerradius2double},
                                                                             Mode=OneWay}" 
                                                           RadiusY="{Binding CornerRadius, 
                                                                             Source={x:Reference btnOverlay},
                                                                             Converter={StaticResource cMacroButton_converter_cornerradius2double},
                                                                             Mode=OneWay}">
                                            <RectangleGeometry.Rect>
                                                <MultiBinding Converter="{StaticResource cMacroButton_converter_size2rect}">
                                                    <Binding Path="ActualWidth" Source="{x:Reference btnOverlay}" Mode="OneWay"/>
                                                    <Binding Path="ActualHeight" Source="{x:Reference btnOverlay}" Mode="OneWay"/>
                                                </MultiBinding>
                                            </RectangleGeometry.Rect>
                                        </RectangleGeometry>
                                    </Canvas.Clip>

                                    <!--临时-->
                                    <!--<TextBlock Text="{Binding Margin, RelativeSource={RelativeSource AncestorType={x:Type Grid}}, Mode=OneWay}"
                                               Visibility="{Binding IsDebugMode, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource cMacroButton_converter_bool2visibility}}"
                                               Foreground="OrangeRed"
                                               FontWeight="Bold"/>-->

                                    <Ellipse Height="{Binding ActualWidth, RelativeSource={RelativeSource Self}, Mode=OneWay}"
                                             Fill="Gray" 
                                             RenderTransformOrigin="0.5,0.5"
                                             Opacity="{Binding RippleProgress, 
                                                               RelativeSource={RelativeSource TemplatedParent}, 
                                                               Converter={StaticResource cMacroButton_converter_rippleprogress2opacity}}">
                                        <Ellipse.Effect>
                                            <effect:TranslationalEffect Threshold="0.33"/>
                                        </Ellipse.Effect>

                                        <Ellipse.Width>
                                            <MultiBinding Converter="{StaticResource cMacroButton_converter_wh2ripplesize}">
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}"/>
                                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource AncestorType={x:Type Canvas}}"/>
                                            </MultiBinding>
                                        </Ellipse.Width>

                                        <Canvas.Left>
                                            <MultiBinding Converter="{StaticResource cMacroButton_converter_ripplecenter2canvasleft}">
                                                <Binding Path="ActualWidth" RelativeSource="{RelativeSource Self}"/>
                                                <Binding Path="RippleCenter" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </Canvas.Left>
                                        <Canvas.Top>
                                            <MultiBinding Converter="{StaticResource cMacroButton_converter_ripplecenter2canvastop}">
                                                <Binding Path="ActualHeight" RelativeSource="{RelativeSource Self}"/>
                                                <Binding Path="RippleCenter" RelativeSource="{RelativeSource TemplatedParent}"/>
                                            </MultiBinding>
                                        </Canvas.Top>

                                        <Ellipse.RenderTransform>
                                            <TransformGroup>
                                                <ScaleTransform ScaleX="{Binding RippleProgress, RelativeSource={RelativeSource TemplatedParent}}" 
                                                                ScaleY="{Binding RippleProgress, RelativeSource={RelativeSource TemplatedParent}}"/>
                                            </TransformGroup>
                                        </Ellipse.RenderTransform>
                                    </Ellipse>
                                </Canvas>

                            </Grid>

                            <!--HitBox-->
                            <Border Background="Transparent">
                                <Border.Resources>
                                    <proxy:BindingProxy x:Key="proxy4btn" Data="{Binding RelativeSource={RelativeSource AncestorType={x:Type local:cMacroButton}}, Mode=OneWay}"/>
                                    <proxy:BindingProxy x:Key="proxy4container" Data="{Binding RelativeSource={RelativeSource AncestorType={x:Type container:cMacroButtonGroupContainer}}, Mode=OneWay}"/>
                                </Border.Resources>
                                
                                <!--右键菜单-->
                                <Border.ContextMenu>
                                    <contextmenuex:cContextMenu StaysOpen="True"
                                                                Parent="{Binding Data, Source={StaticResource proxy4btn}, Mode=OneWay}"
                                                                CloseMenuCommand="{Binding Data.CloseMenuCommand, Source={StaticResource proxy4btn}, Mode=OneWay}"
                                                                ResetFocusCommand="{Binding Data.DataContext.ResetFocusCommand, Source={StaticResource proxy4container}, Mode=OneWay}"
                                                                RemoveItemCommand="{Binding Data.DataContext.RemoveItemCommand, Source={StaticResource proxy4container}, Mode=OneWay}">
                                        <contextmenuex:cContextMenu.IsOpen>
                                            <MultiBinding Converter="{StaticResource cMacroButton_converter_editor4macrobutton}" Mode="OneWay">
                                                <Binding Path="ContextMenuIsOpen" RelativeSource="{RelativeSource TemplatedParent}"/>
                                                <Binding Path="Data.DataContext.Type" Source="{StaticResource proxy4container}"/>
                                            </MultiBinding>
                                        </contextmenuex:cContextMenu.IsOpen>
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="Closed">
                                                <i:InvokeCommandAction Command="{Binding Data.MenuClosedCommand, Source={StaticResource proxy4btn}, Mode=OneWay}"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                        
                                        <!--属性编辑器-->
                                        <macrobuttoneditorex:cMacroButtonEditor MinWidth="100" MinHeight="50"
                                                                                DataContext="{Binding Data.DataContext, Source={StaticResource proxy4btn}, Mode=OneWay}"/>
                                    </contextmenuex:cContextMenu>
                                </Border.ContextMenu>
                                
                            </Border>
                        </Grid>
                    </Border>

                    <ControlTemplate.Triggers>
                        <!--DebugMode切换-->
                        <DataTrigger Binding="{Binding IsDebugMode, RelativeSource={RelativeSource Self}}" Value="True">
                            <Setter Property="ContentTemplate" Value="{StaticResource DebugTemplate}" TargetName="btnContainer"/>
                        </DataTrigger>
                        <DataTrigger Binding="{Binding IsDebugMode, RelativeSource={RelativeSource Self}}" Value="False">
                            <Setter Property="ContentTemplate" Value="{StaticResource ReleaseTemplate}" TargetName="btnContainer"/>
                        </DataTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>