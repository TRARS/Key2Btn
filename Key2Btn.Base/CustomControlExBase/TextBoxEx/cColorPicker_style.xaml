<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
                    xmlns:local="clr-namespace:Key2Btn.Base.CustomControlExBase.TextBoxEx" 
                    xmlns:contextmenuex="clr-namespace:Key2Btn.Base.CustomControlExBase.ContextMenuEx">

    <ResourceDictionary.MergedDictionaries>
        <ResourceDictionary Source="/Key2Btn.Base;component/CustomStyle/ScrollViewerEx/cScrollViewer_style.xaml"/>
        <ResourceDictionary Source="/Key2Btn.Base;component/CustomStyle/SliderEx/cSlider_style.xaml"/>
        <ResourceDictionary Source="/Key2Btn.Base;component/CustomStyle/TooltipEx/cTooltip_style.xaml"/>
    </ResourceDictionary.MergedDictionaries>

    <Style TargetType="{x:Type local:cColorPicker}">
        <Style.Resources>
            <local:cColorPicker_converter_hsv2brush x:Key="cColorPicker_converter_hsv2brush"/>
            <local:cColorPicker_converter_hsv2selectedIndex x:Key="cColorPicker_converter_hsv2selectedIndex"/>
            <local:cColorPicker_converter_hsv2hsvstring x:Key="cColorPicker_converter_hsv2hsvstring"/>
            <local:cColorPicker_converter_hsv2hsvbrush x:Key="cColorPicker_converter_hsv2hsvbrush"/>
            <local:cColorPicker_converter_hsv2slidervalue x:Key="cColorPicker_converter_hsv2slidervalue"/>
            <local:cColorPicker_converter_sliderwidth x:Key="cColorPicker_converter_sliderwidth"/>

            <SolidColorBrush x:Key="BackgroundColor" Color="#FF202020" />
            <SolidColorBrush x:Key="BorderColor" Color="#FF3F3F46" />
            <SolidColorBrush x:Key="ForegroundColor" Color="White" />
            <SolidColorBrush x:Key="SecondaryColor" Color="#FF2d5a8c" />
            <SolidColorBrush x:Key="AccentColor" Color="#FF007ACC" />

            <VisualBrush x:Key="TileBrush" TileMode="Tile" Viewport="0,0,3,3" ViewportUnits="Absolute" Viewbox="0,0,15,15" ViewboxUnits="Absolute">
                <VisualBrush.Visual>
                    <Grid Background="Black" RenderTransformOrigin="0.5,0.5">
                        <Path Data="M 0,15 L 15,0" Stroke="White" StrokeThickness="5" Opacity="0.4" />
                        <Path Data="M 15,15 L 30,0" Stroke="White"  StrokeThickness="5" Opacity="0.4" />
                        <Path Data="M 15,-15 L 0,0" Stroke="White"  StrokeThickness="5" Opacity="0.4" />
                        <Path Data="M 0,30 L 15,15" Stroke="White"  StrokeThickness="5" Opacity="0.4" />
                        <Path Data="M 0,0 L -15,15" Stroke="White"  StrokeThickness="5" Opacity="0.4" />
                    </Grid>
                </VisualBrush.Visual>
            </VisualBrush>

            <DrawingBrush x:Key="DashedLine" TileMode="Tile" Viewport="0,0,9,1" ViewportUnits="Absolute">
                <DrawingBrush.Drawing>
                    <DrawingGroup>
                        <!-- White stripe -->
                        <GeometryDrawing>
                            <GeometryDrawing.Geometry>
                                <RectangleGeometry Rect="0,0,3,1"/>
                            </GeometryDrawing.Geometry>
                            <GeometryDrawing.Brush>
                                <SolidColorBrush Color="LightGray"/>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                        <!-- Black stripe -->
                        <GeometryDrawing>
                            <GeometryDrawing.Geometry>
                                <RectangleGeometry Rect="3,0,1,1"/>
                            </GeometryDrawing.Geometry>
                            <GeometryDrawing.Brush>
                                <SolidColorBrush Color="Black"/>
                            </GeometryDrawing.Brush>
                        </GeometryDrawing>
                    </DrawingGroup>
                </DrawingBrush.Drawing>
            </DrawingBrush>

            <!--图标-->
            <DataTemplate x:Key="ButtonIcon">
                <Path Width="8" 
                      Height="8"
                      Stretch="Uniform"
                      Data="M810.666667 554.666667l-256 0 0 256c0 25.6-17.066667 42.666667-42.666667 42.666667s-42.666667-17.066667-42.666667-42.666667l0-256L213.333333 554.666667c-25.6 0-42.666667-17.066667-42.666667-42.666667s17.066667-42.666667 42.666667-42.666667l256 0L469.333333 213.333333c0-25.6 17.066667-42.666667 42.666667-42.666667s42.666667 17.066667 42.666667 42.666667l0 256 256 0c25.6 0 42.666667 17.066667 42.666667 42.666667S836.266667 554.666667 810.666667 554.666667z"
                      Fill="White"
                      SnapsToDevicePixels="True"
                      HorizontalAlignment="Center"
                      VerticalAlignment="Center"
                      Focusable="False"/>
            </DataTemplate>

            <!--HSV调色器-->
            <DataTemplate x:Key="ColorPalette">
                <Grid Grid.IsSharedSizeScope="True">
                    <Grid.ColumnDefinitions>
                        <ColumnDefinition Width="11"/>
                        <ColumnDefinition Width="*"/>
                        <ColumnDefinition Width="35"/>
                    </Grid.ColumnDefinitions>
                    <Grid.RowDefinitions>
                        <RowDefinition/>
                        <RowDefinition SharedSizeGroup="hhh"/>
                        <RowDefinition SharedSizeGroup="sss"/>
                        <RowDefinition SharedSizeGroup="vvv"/>
                        <RowDefinition SharedSizeGroup="aaa"/>
                    </Grid.RowDefinitions>

                    <!--文本-->
                    <TextBlock Grid.Column="2" Grid.Row="0" Visibility="Collapsed"
                               Text="{Binding ColorHSVA, 
                                              RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"/>

                    <!--色相-->
                    <TextBlock Grid.Column="0" Grid.Row="1" HorizontalAlignment="Center" VerticalAlignment="Center" Text="H"/>
                    <Border Grid.Column="1" Grid.Row="1" Margin="3,2,0,2" Padding="1" BorderBrush="LightGray" BorderThickness="1" CornerRadius="2" VerticalAlignment="Center">
                        <Border Height="10" CornerRadius="1"
                                Background="{Binding ColorHSVA, 
                                                     RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                     Converter={StaticResource cColorPicker_converter_hsv2hsvbrush},
                                                     ConverterParameter=h}">
                            <Canvas>
                                <Slider Style="{StaticResource cSliderStyle}" 
                                        Width="{Binding ActualWidth, 
                                                        RelativeSource={RelativeSource AncestorType={x:Type Border}}, 
                                                        Converter={StaticResource cColorPicker_converter_sliderwidth},
                                                        ConverterParameter=10}"
                                        Value="{Binding ColorHSVA,
                                                        RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                        Converter={StaticResource cColorPicker_converter_hsv2slidervalue},
                                                        ConverterParameter=h, Mode=OneWay}"
                                        Maximum="359"
                                        Minimum="0"
                                        TickFrequency="1"
                                        LargeChange="1"
                                        SmallChange="1"
                                        IsSnapToTickEnabled="True"
                                        Margin="-5,0,0,0"
                                        Canvas.Bottom="-3">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="ValueChanged">
                                            <i:InvokeCommandAction Command="{Binding HueValueChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseDownCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseUp">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseUpCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Slider>
                            </Canvas>
                        </Border>
                    </Border>
                    <TextBlock Grid.Column="2" Grid.Row="1"  HorizontalAlignment="Right" VerticalAlignment="Center"
                               Text="{Binding ColorHSVA,
                                              RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                              Converter={StaticResource cColorPicker_converter_hsv2hsvstring},
                                              ConverterParameter=h}"/>
                    
                    <!--饱和度-->
                    <TextBlock Grid.Column="0" Grid.Row="2" HorizontalAlignment="Center" VerticalAlignment="Center" Text="S"/>
                    <Border Grid.Column="1" Grid.Row="2" Margin="3,2,0,2" Padding="1" BorderBrush="LightGray" BorderThickness="1" CornerRadius="2" VerticalAlignment="Center">
                        <Border Height="10" CornerRadius="1"
                                Background="{Binding ColorHSVA, 
                                                     RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                     Converter={StaticResource cColorPicker_converter_hsv2hsvbrush},
                                                     ConverterParameter=s}">
                            <Canvas>
                                <Slider Style="{StaticResource cSliderStyle}" 
                                        Width="{Binding ActualWidth, 
                                                        RelativeSource={RelativeSource AncestorType={x:Type Border}}, 
                                                        Converter={StaticResource cColorPicker_converter_sliderwidth},
                                                        ConverterParameter=10}"
                                        Value="{Binding ColorHSVA,
                                                        RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                        Converter={StaticResource cColorPicker_converter_hsv2slidervalue},
                                                        ConverterParameter=s, Mode=OneWay}"
                                        Maximum="100"
                                        Minimum="0"
                                        TickFrequency="1"
                                        LargeChange="1"
                                        SmallChange="1"
                                        IsSnapToTickEnabled="True"
                                        Margin="-5,0,0,0"
                                        Canvas.Bottom="-3">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="ValueChanged">
                                            <i:InvokeCommandAction Command="{Binding SaturationValueChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseDownCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseUp">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseUpCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Slider>
                            </Canvas>
                        </Border>
                    </Border>
                    <TextBlock Grid.Column="2" Grid.Row="2"  HorizontalAlignment="Right" VerticalAlignment="Center"
                               Text="{Binding ColorHSVA,
                                              RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                              Converter={StaticResource cColorPicker_converter_hsv2hsvstring},
                                              ConverterParameter=s}"/>
                    
                    <!--明度-->
                    <TextBlock Grid.Column="0" Grid.Row="3" HorizontalAlignment="Center" VerticalAlignment="Center" Text="V"/>
                    <Border Grid.Column="1" Grid.Row="3" Margin="3,2,0,2" Padding="1" BorderBrush="LightGray" BorderThickness="1" CornerRadius="2" VerticalAlignment="Center">
                        <Border Height="10" CornerRadius="1"
                                Background="{Binding ColorHSVA, 
                                                     RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                     Converter={StaticResource cColorPicker_converter_hsv2hsvbrush},
                                                     ConverterParameter=v}">
                            <Canvas>
                                <Slider Style="{StaticResource cSliderStyle}" 
                                        Width="{Binding ActualWidth, 
                                                        RelativeSource={RelativeSource AncestorType={x:Type Border}}, 
                                                        Converter={StaticResource cColorPicker_converter_sliderwidth},
                                                        ConverterParameter=10}"
                                        Value="{Binding ColorHSVA,
                                                        RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                        Converter={StaticResource cColorPicker_converter_hsv2slidervalue},
                                                        ConverterParameter=v, Mode=OneWay}"
                                        Maximum="100"
                                        Minimum="0"
                                        TickFrequency="1"
                                        LargeChange="1"
                                        SmallChange="1"
                                        IsSnapToTickEnabled="True"
                                        Margin="-5,0,0,0"
                                        Canvas.Bottom="-3">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="ValueChanged">
                                            <i:InvokeCommandAction Command="{Binding ValueValueChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseDown">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseDownCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                        <i:EventTrigger EventName="PreviewMouseUp">
                                            <i:InvokeCommandAction Command="{Binding SliderPreviewMouseUpCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>
                                </Slider>
                            </Canvas>
                        </Border>
                    </Border>
                    <TextBlock Grid.Column="2" Grid.Row="3"  HorizontalAlignment="Right" VerticalAlignment="Center"
                               Text="{Binding ColorHSVA,
                                              RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                              Converter={StaticResource cColorPicker_converter_hsv2hsvstring},
                                              ConverterParameter=v}"/>
                    
                    <!--不透明度-->
                    <TextBlock Grid.Column="0" Grid.Row="4" HorizontalAlignment="Center" VerticalAlignment="Center" Text="α"/>
                    <Border Grid.Column="1" Grid.Row="4" Margin="3,2,0,2" Padding="1" BorderBrush="LightGray" BorderThickness="1" CornerRadius="2" VerticalAlignment="Center">
                        <Grid>
                            <Border>
                                <Border.Background>
                                    <VisualBrush TileMode="Tile" 
                                                 Viewport="0,0,10,10" ViewportUnits="Absolute" 
                                                 Viewbox="0,0,20,20" ViewboxUnits="Absolute">
                                        <VisualBrush.Visual>
                                            <Grid Background="Black" RenderTransformOrigin="0.5,0.5">
                                                <Grid Opacity="0.25">
                                                    <Path Data="M 0,5 L 10,5" Stroke="White" StrokeThickness="10"/>
                                                    <Path Data="M 10,15 L 20,15" Stroke="White" StrokeThickness="10"/>
                                                </Grid>
                                            </Grid>
                                        </VisualBrush.Visual>
                                    </VisualBrush>
                                </Border.Background>
                            </Border>
                            <Border Height="10" CornerRadius="1"
                                    Background="{Binding ColorHSVA, 
                                                         RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                         Converter={StaticResource cColorPicker_converter_hsv2hsvbrush},
                                                         ConverterParameter=a}">
                                <Canvas>
                                    <Slider Style="{StaticResource cSliderStyle}" 
                                            Width="{Binding ActualWidth, 
                                                            RelativeSource={RelativeSource AncestorType={x:Type Border}}, 
                                                            Converter={StaticResource cColorPicker_converter_sliderwidth},
                                                            ConverterParameter=10}"
                                            Value="{Binding ColorHSVA,
                                                            RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                            Converter={StaticResource cColorPicker_converter_hsv2slidervalue},
                                                            ConverterParameter=a, Mode=OneWay}"
                                            Maximum="100"
                                            Minimum="0"
                                            TickFrequency="1"
                                            LargeChange="1"
                                            SmallChange="1"
                                            IsSnapToTickEnabled="True"
                                            Margin="-5,0,0,0"
                                            Canvas.Bottom="-3">
                                        <i:Interaction.Triggers>
                                            <i:EventTrigger EventName="ValueChanged">
                                                <i:InvokeCommandAction Command="{Binding AlphaValueChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                        PassEventArgsToCommand="True"/>
                                            </i:EventTrigger>
                                            <i:EventTrigger EventName="PreviewMouseDown">
                                                <i:InvokeCommandAction Command="{Binding SliderPreviewMouseDownCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                        PassEventArgsToCommand="True"/>
                                            </i:EventTrigger>
                                            <i:EventTrigger EventName="PreviewMouseUp">
                                                <i:InvokeCommandAction Command="{Binding SliderPreviewMouseUpCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                        PassEventArgsToCommand="True"/>
                                            </i:EventTrigger>
                                        </i:Interaction.Triggers>
                                    </Slider>
                                </Canvas>
                            </Border>
                        </Grid>
                    </Border>
                    <TextBlock Grid.Column="2" Grid.Row="4"  HorizontalAlignment="Right" VerticalAlignment="Center"
                               Text="{Binding ColorHSVA,
                                              RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                              Converter={StaticResource cColorPicker_converter_hsv2hsvstring},
                                              ConverterParameter=a}"/>

                </Grid>
            </DataTemplate>

            <!--颜色(Item)-->
            <Style x:Key="ListBoxItemStyle" TargetType="{x:Type ListBoxItem}">
                <Setter Property="BorderThickness" Value="1" />
                <Setter Property="FontSize" Value="13" />
                <Setter Property="Padding" Value="2,0" />
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBoxItem}">
                            <Grid>
                                <Border x:Name="innerBorder" 
                                        Background="{TemplateBinding Background}" 
                                        Padding="{TemplateBinding Padding}" 
                                        CornerRadius="1.5"
                                        SnapsToDevicePixels="true">
                                    <!--<ContentPresenter Margin="2"/>-->
                                    
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        
                                        <!--色块-->
                                        <Border Grid.Column="0" 
                                                BorderBrush="{StaticResource TileBrush}"
                                                Height="16"
                                                Width="{Binding Height, RelativeSource={RelativeSource Self}}"
                                                Background="{Binding ARGB}"
                                                BorderThickness="2"
                                                Margin="1,1,3,1">
                                        </Border>
                                        
                                        <!--名字-->
                                        <Viewbox Grid.Column="1" Height="16" Stretch="Uniform" HorizontalAlignment="Left">
                                            <TextBlock Text="{Binding Name, Mode=OneWay}"/>
                                        </Viewbox>
                   
                                    </Grid>
                                </Border>
                            </Grid>
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsMouseOver" Value="true">
                                    <Setter TargetName="innerBorder" Property="Background" Value="{StaticResource SecondaryColor}"/>
                                </Trigger>
                                <Trigger Property="IsSelected" Value="True">
                                    <Setter TargetName="innerBorder" Property="Background" Value="{StaticResource AccentColor}"/>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--颜色列表-->
            <Style x:Key="ListBoxStyle" TargetType="{x:Type ListBox}">
                <Style.Resources>
                    <Style TargetType="{x:Type ListBoxItem}" BasedOn="{StaticResource ListBoxItemStyle}"/>
                </Style.Resources>

                <Setter Property="Width" Value="144"/>
                <Setter Property="MaxWidth" Value="304"/>
                <Setter Property="MaxHeight" Value="384"/>
                <Setter Property="Background" Value="{StaticResource BackgroundColor}"/>
                <Setter Property="Foreground" Value="{StaticResource ForegroundColor}"/>
                <Setter Property="BorderBrush" Value="{StaticResource BorderColor}"/>
                
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type ListBox}">
                            <Border x:Name="border" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" Background="{TemplateBinding Background}" Padding="1" SnapsToDevicePixels="True"
                                    CornerRadius="2.5">
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="auto"/>
                                        <RowDefinition Height="*"/>
                                    </Grid.RowDefinitions>

                                    <!--顶部横幅-->
                                    <Grid Grid.Row="0">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="auto"/>
                                            <ColumnDefinition/>
                                        </Grid.ColumnDefinitions>
                                        <Grid.RowDefinitions>
                                            <RowDefinition Height="auto"/>
                                            <RowDefinition Height="auto"/>
                                        </Grid.RowDefinitions>

                                        <Border Grid.Column="0" Grid.Row="0" 
                                                BorderBrush="LightGray" BorderThickness="1" Padding="1" CornerRadius="2" Margin="2">
                                            <Border Width="12" Height="12" CornerRadius="1"
                                                Background="{Binding ColorHSVA,
                                                                     RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}},
                                                                     Converter={StaticResource cColorPicker_converter_hsv2brush}}">

                                            </Border>
                                        </Border>
                                        <TextBlock Grid.ColumnSpan="2" Grid.Row="0" 
                                                   Text="Color Picker" Foreground="White" HorizontalAlignment="Center" VerticalAlignment="Center"/>
                                        <Border Grid.ColumnSpan="2" Grid.Row="1" 
                                                Height="1" Margin="0,1,0,1" Background="{StaticResource DashedLine}"/>
                                    </Grid>

                                    <!--HSV调色器-->
                                    <StackPanel Grid.Row="1" Orientation="Vertical">
                                        <ContentControl Grid.Row="1" ContentTemplate="{StaticResource ColorPalette}"/>
                                        <Border Height="1" Margin="0,1,0,1" Background="{StaticResource DashedLine}"/>
                                    </StackPanel>

                                    <!--列表本体-->
                                    <ScrollViewer Grid.Row="2" Focusable="False" Padding="{TemplateBinding Padding}" Margin="0"
                                                  Style="{StaticResource cScrollViewerStyle}">
                                        <ItemsPresenter SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}"/>
                                    </ScrollViewer>
                                </Grid>
                            </Border>
                            
                            <ControlTemplate.Triggers>
                                <Trigger Property="IsEnabled" Value="False">
                                    <Setter Property="Background" TargetName="border" Value="{StaticResource BackgroundColor}"/>
                                    <Setter Property="BorderBrush" TargetName="border" Value="{StaticResource SecondaryColor}"/>
                                </Trigger>
                                <MultiTrigger>
                                    <MultiTrigger.Conditions>
                                        <Condition Property="IsGrouping" Value="True"/>
                                        <Condition Property="VirtualizingPanel.IsVirtualizingWhenGrouping" Value="False"/>
                                    </MultiTrigger.Conditions>
                                    <Setter Property="ScrollViewer.CanContentScroll" Value="False"/>
                                </MultiTrigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
                <Setter Property="ItemsPanel">
                    <Setter.Value>
                        <ItemsPanelTemplate>
                            <VirtualizingStackPanel IsVirtualizing="True"/>
                        </ItemsPanelTemplate>
                    </Setter.Value>
                </Setter>
            </Style>

            <!--按钮-->
            <Style x:Key="ButtonStyle" TargetType="{x:Type Button}">
                <Setter Property="HorizontalAlignment" Value="Left"/>
                <Setter Property="VerticalAlignment" Value="Stretch"/>
                <Setter Property="Width" Value="16"/>
                <Setter Property="MinHeight" Value="16"/>
                <Setter Property="IsEnabled" Value="True"/>
                <Setter Property="Template">
                    <Setter.Value>
                        <ControlTemplate TargetType="{x:Type Button}">
                            <Grid Background="Transparent">
                                <i:Interaction.Triggers>
                                    <i:EventTrigger EventName="MouseEnter">
                                        <i:ChangePropertyAction PropertyName="Opacity" Value="0.5"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseLeave">
                                        <i:ChangePropertyAction PropertyName="Opacity" Value="1.0"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseDown">
                                        <i:ChangePropertyAction PropertyName="Opacity" Value="1.0"/>
                                    </i:EventTrigger>
                                    <i:EventTrigger EventName="MouseUp">
                                        <i:ChangePropertyAction PropertyName="Opacity" Value="0.5"/>
                                    </i:EventTrigger>
                                </i:Interaction.Triggers>

                                <!--底色-->
                                <Border Background="#FF202020" CornerRadius="2.5" Height="16"/>

                                <!--内容-->
                                <ContentPresenter HorizontalAlignment="Center"
                                                  VerticalAlignment="Center"
                                                  IsHitTestVisible="False"
                                                  Margin="2"/>

                                <!--气泡-->
                                <Popup x:Name="PART_Popup" IsOpen="False"
                                       AllowsTransparency="True"
                                       PlacementTarget="{Binding RelativeSource={RelativeSource TemplatedParent}}"
                                       Placement="Right"
                                       StaysOpen="True" 
                                       Focusable="True"
                                       Margin="-2">
                                    <i:Interaction.Triggers>
                                        <i:EventTrigger EventName="Opened">
                                            <i:InvokeCommandAction Command="{Binding PopupOpendCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                   PassEventArgsToCommand="True"/>
                                        </i:EventTrigger>
                                    </i:Interaction.Triggers>

                                    <Border x:Name="PopupContent" MinWidth="60" MinHeight="25"
                                            CornerRadius="{Binding BorderCornerRadius, RelativeSource={RelativeSource AncestorType={x:Type contextmenuex:cContextMenu}}}"
                                            BorderThickness="{Binding BorderThickness, RelativeSource={RelativeSource AncestorType={x:Type contextmenuex:cContextMenu}}}"
                                            BorderBrush="Crimson">
                                        <ListBox Style="{StaticResource ListBoxStyle}"
                                                 ItemsSource="{Binding PredefinedColors, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                 ScrollViewer.HorizontalScrollBarVisibility="Disabled">
                                            <ListBox.SelectedIndex>
                                                <MultiBinding Converter="{StaticResource cColorPicker_converter_hsv2selectedIndex}" Mode="OneWay">
                                                    <Binding Path="ColorHSVA" RelativeSource="{RelativeSource AncestorType={x:Type local:cColorPicker}}" Mode="OneWay"/>
                                                    <Binding Path="PredefinedColors" RelativeSource="{RelativeSource AncestorType={x:Type local:cColorPicker}}" Mode="OneWay"/>
                                                </MultiBinding>
                                            </ListBox.SelectedIndex>
                                            <i:Interaction.Triggers>
                                                <i:EventTrigger EventName="SelectionChanged">
                                                    <i:InvokeCommandAction Command="{Binding ListBoxSelectionChangedCommand, RelativeSource={RelativeSource AncestorType={x:Type local:cColorPicker}}}"
                                                                           CommandParameter="{Binding SelectedItem, RelativeSource={RelativeSource AncestorType={x:Type ListBox}}, Mode=OneWay}"/>
                                                </i:EventTrigger>
                                            </i:Interaction.Triggers>
                                        </ListBox>
                                    </Border>
                                </Popup>

                            </Grid>

                            <ControlTemplate.Triggers>
                                <DataTrigger Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False">
                                    <Setter Property="Opacity" Value="0.5"/>
                                </DataTrigger>
                                <Trigger Property="IsMouseOver" Value="False">
                                    <Trigger.EnterActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                                                                                Storyboard.TargetName="PART_Popup">
                                                    <DiscreteBooleanKeyFrame KeyTime="0:0:0.6" Value="False"/>
                                                </BooleanAnimationUsingKeyFrames>
                                                <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="Opacity"
                                                                               Storyboard.TargetName="PopupContent">
                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.25" Value="1"/>
                                                    <LinearDoubleKeyFrame KeyTime="0:0:0.55" Value="0"/>
                                                </DoubleAnimationUsingKeyFrames>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.EnterActions>
                                    <Trigger.ExitActions>
                                        <BeginStoryboard>
                                            <Storyboard>
                                                <BooleanAnimationUsingKeyFrames Storyboard.TargetProperty="IsOpen"
                                                                                Storyboard.TargetName="PART_Popup">
                                                    <DiscreteBooleanKeyFrame  KeyTime="0:0:0.0" Value="True"/>
                                                </BooleanAnimationUsingKeyFrames>
                                                <DoubleAnimation Storyboard.TargetProperty="Opacity"
                                                                 Storyboard.TargetName="PopupContent"
                                                                 Duration="0:0:0.05"
                                                                 To="1"/>
                                            </Storyboard>
                                        </BeginStoryboard>
                                    </Trigger.ExitActions>
                                </Trigger>
                            </ControlTemplate.Triggers>
                        </ControlTemplate>
                    </Setter.Value>
                </Setter>
            </Style>
        </Style.Resources>
        
        <!--ColorPicker本体-->
        <Setter Property="Foreground" Value="White"/>
        <Setter Property="Margin" Value="1"/>
        <Setter Property="MinWidth" Value="96"/>
        <Setter Property="MinHeight" Value="25"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None"/>
        <Setter Property="HorizontalContentAlignment" Value="Left"/>
        <Setter Property="FocusVisualStyle" Value="{x:Null}"/>
        <Setter Property="AllowDrop" Value="true"/>
        <Setter Property="ScrollViewer.PanningMode" Value="VerticalFirst"/>
        <Setter Property="Stylus.IsFlicksEnabled" Value="False"/>
        <Setter Property="SelectionBrush" Value="White"/>
        <Setter Property="SelectionTextBrush" Value="Black"/>
        <Setter Property="CaretBrush" Value="OrangeRed"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:cColorPicker}">
                    <Border x:Name="border">
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition/>
                                <ColumnDefinition Width="auto"/>
                            </Grid.ColumnDefinitions>

                            <Rectangle Grid.ColumnSpan="2"             Fill="White"    Opacity="0.2" RadiusX="2" RadiusY="2" />
                            <Rectangle Grid.ColumnSpan="2" x:Name="bk" Fill="DarkGray" Opacity="0.1" RadiusX="2" RadiusY="2" />

                            <ScrollViewer Grid.Column="0" x:Name="PART_ContentHost" Focusable="false" HorizontalScrollBarVisibility="Hidden" VerticalScrollBarVisibility="Hidden"
                                          VerticalAlignment="Center" Margin="4,0,0,0">
                                <ScrollViewer.Effect>
                                    <DropShadowEffect Color="Black" BlurRadius="0" ShadowDepth="1"/>
                                </ScrollViewer.Effect>
                            </ScrollViewer>

                            <!--Popup容器-->
                            <Border Grid.Column="1" CornerRadius="1.5" HorizontalAlignment="Right"
                                    Margin="2,0,2,0">
                                <Button DataContext="{Binding}"
                                        ContentTemplate="{StaticResource ButtonIcon}" 
                                        Style="{StaticResource ButtonStyle}"/>
                            </Border>
                        </Grid>

                    </Border>

                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Opacity" TargetName="border" Value="0.5"/>
                        </Trigger>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Opacity" TargetName="bk" Value="0.8"/>
                        </Trigger>
                        <Trigger Property="IsKeyboardFocused" Value="true">
                            <Setter Property="Opacity" TargetName="bk" Value="0.8"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
</ResourceDictionary>